
@using System
@using System.Data.Entity.SqlServer
@using System.Globalization
@using System.Runtime.InteropServices
@using System.Web.Mvc.Html
@using SDNWebApps.Areas.Baby.Models

@using SDNWebApps.Areas.Baby.Models.DoneThings
@using SDNWebApps.Views
@using System.Web.Mvc.Html
@using Microsoft.Ajax.Utilities
@model List<SDNWebApps.Areas.Baby.Models.DoneThings.ListViewModel>

@functions {

    //make an outside view/class
    public class AmountGroup
    {
        public DateTime ItemDate;
        public string Name;
        public string LiquidSize;
        public double? TotalAmount;

    }
}

@{


    ViewBag.Title = "Freddy's Daily Break Down";
    Layout = "~/Areas/Baby/Views/Shared/_BabyLayout.cshtml";
    string color = string.Empty;
    string _LastDate = string.Empty;
    //TimeSpan SleepTime = new TimeSpan();
    int colorCounter = 0;

    SDNAppsEntities ae = new SDNAppsEntities();
    HttpCookieCollection SDNWebApps = Request.Cookies;

    //Clean this up
    List<Reminder> Reminders = ae.Reminders.Where(m => m.Deleted == false).ToList();

    var DayTotals = Model.Where(m => m.EndTime == null).GroupBy(m => new { m.StartTime.Date, m.Actions.Title, m.LiquidSize.Type })
            .Select(group => new { mdate = group.Key.Date, mitem = group.Key.Title, mtotal = group.Sum(p => p.OZ), mliquidsize = group.Key.Type }).ToList();

    var TimeTotals = Model.Where(m => m.EndTime != null).GroupBy(m => new { m.StartTime.Date, m.Actions.Title })
            .Select(group => new { mdate = group.Key.Date, mitem = group.Key.Title, mtotal = group.Sum(p => ((DateTime) p.EndTime-p.StartTime).Minutes), mliquidsize = "Mins"}).ToList();



    List<AmountGroup> DaySummarys = DayTotals.Select(amount => new AmountGroup()
    { ItemDate = amount.mdate, LiquidSize = amount.mliquidsize, Name = amount.mitem, TotalAmount = amount.mtotal}).ToList();

    DaySummarys.AddRange(TimeTotals.Select(groupamount => new AmountGroup()
        { ItemDate = groupamount.mdate, LiquidSize = groupamount.mliquidsize, Name = groupamount.mitem, TotalAmount = groupamount.mtotal}));


    List<string> TimeToDoItems = new List<string>();

    foreach (var reminder in Reminders)
    {
        if (reminder.ReminderType.Type.Equals("Day"))
        {
            var NumberItemsFound = Model.Count(m => m.Actions.index == reminder.ActionID &&  m.StartTime.Date.ToShortDateString() == DateTime.Now.Date.ToShortDateString());
            if (NumberItemsFound == 0)
            {
                TimeToDoItems.Add(item: reminder.Action.Title);
            }
        }
        else if (reminder.ReminderType.Type.Equals("Hour"))
        {

            ListViewModel NumberItemsFound = Model.Where(m => m.Actions.index == reminder.ActionID && m.StartTime.Date.ToShortDateString() == DateTime.Now.Date.ToShortDateString()).OrderByDescending(m => m.StartTime).FirstOrDefault();

            if (NumberItemsFound == null)
            {
                TimeToDoItems.Add(item: reminder.Action.Title);
            }
            else if ((DateTime.Now - NumberItemsFound.StartTime).Hours >= reminder.Every)
            {
                TimeToDoItems.Add(item: reminder.Action.Title);
            }

        }



    }
}

@Styles.Render("~/Content/css")
@Scripts.Render("~/bundles/modernizr")
@Scripts.Render("~/bundles/jquery")

@if (!TimeToDoItems.Count.Equals(0))
{
    <div>
        <span style="font-size: large; color: red">Need To Do: </span>

        @foreach (var timetodoitems in TimeToDoItems)
        {
            <span>@timetodoitems </span>
        }
    </div>
}

<table style="border-collapse: collapse">


    @foreach (ListViewModel thing in Model)
    {
        switch (colorCounter)
        {
            case 0:
                color = "lightblue";
                colorCounter = 1;
                break;
            case 1:
                color = "lightcoral";
                colorCounter = 0;
                break;

        }



        //I tink this is why my last day is call jacked up
        if (_LastDate != string.Empty && _LastDate != @thing.StartTime.Date.ToString())
        {
            @displaySummary(DaySummarys.Where(m => m.ItemDate.Date == _LastDate.AsDateTime().Date).ToList())
        }


        if (_LastDate != string.Empty)
        {
            @:</div>
        }

        if (_LastDate != @thing.StartTime.Date.ToString())
        {

            <tr><td colspan="5"><h3 style="text-align: center" onclick="">@thing.StartTime.ToString("D")</h3></td></tr>
            <tr style="border-bottom: 1px solid black !important">
                <td style="width: 100px;text-align: center">Item Done </td>
                <td style="text-align: center;width: 75px">Start Time</td>
                <td style="text-align: center;width: 75px">End Time</td>
                <td style="text-align: center">Amount</td>
                @*<td style="text-align: center">Mood</td>*@
                <td style="text-align: center">Notes</td>

            </tr>

        }

        <tr style="padding-bottom: 8px; background-color: @color;">
            <td> @Html.ActionLink(CultureInfo.CurrentCulture.TextInfo.ToTitleCase(@thing.Actions.Title), "Edit", new { id = @thing.Index }) </td>
            <td style="text-align: center; border-left: 1px solid black !important">@thing.StartTime.ToLongTimeString()</td>
            <td style="text-align: center; border-left: 1px solid black !important">@(@thing.EndTime != null ? @thing.EndTime.Value.ToLongTimeString() : "-")</td>
            <td style="text-align: center; border-left: 1px solid black !important">
                @if (@thing.StartTime != null && @thing.EndTime != null)
                {
                    @thing.EndTime.Value.Subtract(@thing.StartTime).ToString().Substring(0, 5);
                }
                else
                {
                    <span> @(@thing.OZ == 0 ? "-" : @thing.OZ.ToString()) @(thing.LiquidSize != null ? @thing.LiquidSize.Type : "")</span>
                }
            </td>


            <td style="text-align: center; border-left: 1px solid black !important">
                @(@thing.Notes)

                @if (Request.Cookies["LoggedIn"] != null)
                {
                    if (thing.Longitude != null)
                    {

                        <br /><a href="http://maps.google.com/maps?z=18&q=@thing.Latitude.Trim(),@thing.Longitude.Trim()" target='_blank'>Map</a>

                    }
                }
            </td>
        </tr>

        _LastDate = @thing.StartTime.Date.ToString();

    }

    @displaySummary(DaySummarys.Where(m => m.ItemDate.Date == _LastDate.AsDateTime().Date).ToList())

</table>


@helper displaySummary(List<AmountGroup> AmountGrouping)
{
    <tr style="border-top: 1px solid black !important">
        @{ int i = 0; }
    <tr>
    @foreach (var groupitem in AmountGrouping)
    {
        if (i == 2)
        {
            i = 0;
        <tr style="height: 10px"></tr>

        }
                <td colspan="2">
                    @groupitem.Name  @groupitem.TotalAmount - @groupitem.LiquidSize
                </td>

                {
                    i = i + 1;
                }


            }
    </tr>
    </tr>
}